{"version":3,"sources":["components/Card/Card.js","components/CardList/CardList.js","components/SearchBox/SearchBox.js","Fallback.js","App.js","serviceWorker.js","index.js"],"names":["Card","monster","id","name","email","className","alt","src","CardList","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","handleSearchChange","e","setState","searchText","target","value","state","fetch","then","response","ok","json","Fallback","users","this","filteredMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6UAiBeA,G,YAbF,SAAC,GAAsC,IAAD,IAAnCC,QAAWC,EAAwB,EAAxBA,GAAIC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MACnC,OACE,yBAAKC,UAAU,kBACb,yBACEC,IAAI,UACJC,IAAG,+BAA0BL,EAA1B,4BAEL,4BAAKC,GACL,2BAAIC,MCIKI,G,MAVE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAClB,OACE,yBAAKJ,UAAU,aACZI,EAASC,KAAI,SAAAT,GAAO,OACnB,kBAAC,EAAD,CAAMU,IAAKV,EAAQC,GAAID,QAASA,UCKzBW,G,MAXG,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAChC,OACE,2BACET,UAAU,SACVU,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC2CD,EArDE,CACf,CACEZ,GAAI,EACJC,KAAM,kBACNC,MAAO,kBAET,CACEF,GAAI,EACJC,KAAM,cACNC,MAAO,iBAET,CACEF,GAAI,EACJC,KAAM,cACNC,MAAO,iBAET,CACEF,GAAI,EACJC,KAAM,aACNC,MAAO,mBAET,CACEF,GAAI,EACJC,KAAM,iBACNC,MAAO,sBAET,CACEF,GAAI,EACJC,KAAM,mBACNC,MAAO,iBAET,CACEF,GAAI,EACJC,KAAM,gBACNC,MAAO,kBAET,CACEF,GAAI,EACJC,KAAM,eACNC,MAAO,gBAET,CACEF,GAAI,EACJC,KAAM,mBACNC,MAAO,uBAET,CACEF,GAAI,GACJC,KAAM,eACNC,MAAO,sBCKIa,E,kDA/Cb,aAAe,IAAD,8BACZ,gBAoBFC,mBAAqB,SAAAC,GACnB,EAAKC,SAAS,CAAEC,WAAYF,EAAEG,OAAOC,SAnBrC,EAAKC,MAAQ,CACXf,SAAU,GACVY,WAAY,IALF,E,gEASO,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GACJ,OAAIA,EAASC,GACJD,EAASE,OAETC,KAGVJ,MAAK,SAAAK,GAAK,OAAI,EAAKX,SAAS,CAAEX,SAAUsB,S,+BAOnC,IAAD,EAC0BC,KAAKR,MAA9Bf,EADD,EACCA,SAAUY,EADX,EACWA,WAEZY,EAAmBxB,EAASyB,QAAO,SAAAjC,GAAO,OAC9CA,EAAQE,KAAKgC,cAAcC,SAASf,EAAWc,kBAGjD,OACE,yBAAK9B,UAAU,OACb,gDAEA,kBAAC,EAAD,CACEQ,YAAY,kBACZC,aAAckB,KAAKd,qBAGrB,kBAAC,EAAD,CAAUT,SAAUwB,S,GA1CVI,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c06daa46.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.css';\r\n\r\nconst Card = ({ monster: { id, name, email } }) => {\r\n  return (\r\n    <div className='card-container'>\r\n      <img\r\n        alt='monster'\r\n        src={`https://robohash.org/${id}?set=set2&size=180x180`}\r\n      />\r\n      <h2>{name}</h2>\r\n      <p>{email}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\n\r\nimport Card from '../Card/Card';\r\n\r\nimport './cardList.css';\r\n\r\nconst CardList = ({ monsters }) => {\r\n  return (\r\n    <div className='card-list'>\r\n      {monsters.map(monster => (\r\n        <Card key={monster.id} monster={monster} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nimport './searchBox.css';\r\n\r\nconst SearchBox = ({ placeholder, handleChange }) => {\r\n  return (\r\n    <input\r\n      className='search'\r\n      type='search'\r\n      placeholder={placeholder}\r\n      onChange={handleChange}\r\n    />\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","const monsters = [\r\n  {\r\n    id: 1,\r\n    name: 'Mister Handsome',\r\n    email: 'handy@mail.com',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Nice Racoon',\r\n    email: 'raqy@mail.com',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Miss Perque',\r\n    email: 'perq@mail.com',\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Slenderman',\r\n    email: 'slendy@mail.com',\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'Wooooow Master',\r\n    email: 'wooooooow@mail.com',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'Charlie Martinez',\r\n    email: 'char@mail.com',\r\n  },\r\n  {\r\n    id: 7,\r\n    name: 'Howard Miller',\r\n    email: 'howie@mail.com',\r\n  },\r\n  {\r\n    id: 8,\r\n    name: 'Louis Garcia',\r\n    email: 'loo@mail.com',\r\n  },\r\n  {\r\n    id: 9,\r\n    name: 'Richard Williams',\r\n    email: 'richywilly@mail.com',\r\n  },\r\n  {\r\n    id: 10,\r\n    name: 'Thomas Jones',\r\n    email: 'thombola@mail.com',\r\n  },\r\n];\r\n\r\nexport default {\r\n  monsters,\r\n};\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport CardList from './components/CardList/CardList';\nimport SearchBox from './components/SearchBox/SearchBox';\nimport Fallback from './Fallback';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchText: '',\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          return Fallback.monsters;\n        }\n      })\n      .then(users => this.setState({ monsters: users }));\n  }\n\n  handleSearchChange = e => {\n    this.setState({ searchText: e.target.value });\n  };\n\n  render() {\n    const { monsters, searchText } = this.state;\n\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchText.toLowerCase())\n    );\n\n    return (\n      <div className='App'>\n        <h1>Monsters Rolodex</h1>\n\n        <SearchBox\n          placeholder='Search monsters'\n          handleChange={this.handleSearchChange}\n        />\n\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}